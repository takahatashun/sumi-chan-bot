const fs = require("fs");
const createCard = require("../controllers/rank_card");
const osu = require("node-osu");
const ytdl = require("ytdl-core");
var checkthreadid = [];
var sleeptime = [];
var wakelist = [];
var playmusic = [];
var checkCrapList = [];
var onoff = true;
var d = new Date();
var utc = d.getTime() + d.getTimezoneOffset() * 60000;
var nd = new Date(utc + 3600000 * 7);
var h = nd.getHours();

module.exports = function({
  api,
  modules,
  config,
  __GLOBAL,
  User,
  Thread,
  Rank
}) {
  let { prefix, ENDPOINT, admins } = config;
  return function({ event }) {
    let { body: contentMessage, senderID, threadID } = event;
    senderID = parseInt(senderID);
    threadID = parseInt(threadID);
    var osuApi = new osu.Api("f542df9a0b7efc666ac0350446f954740a88faa8", {
      notFoundAsError: true,
      completeScores: false
    });
    function osuinfo(username) {
      var main = osuApi
        .apiCall("/get_user", {
          u: username
        })
        .then(user => {
          api.sendMessage(
            `*OSU INFO*\n*username* : ` +
              user[0].username +
              `\n*level* :` +
              user[0].level +
              `\n*playcount* :` +
              user[0].playcount +
              `\n*CountryRank* : ` +
              user[0].pp_country_ran +
              `\n*Total PP* : ` +
              user[0].pp_raw +
              `\n*Accuracy* :` +
              user[0].accuracy +
              `\n<3 `,
            threadID
          );
        });
      return api.sendMessage(main, threadID);
    }

    /* ================ BAN & UNBAN ==================== */

    if (__GLOBAL.userBlocked.includes(senderID)) {
      return;
    }
    // Unban thread
    if (__GLOBAL.threadBlocked.includes(threadID)) {
      if (
        contentMessage == `${prefix}unban thread` &&
        admins.includes(senderID)
      ) {
        const indexOfThread = __GLOBAL.threadBlocked.indexOf(threadID);
        if (indexOfThread == -1)
          return api.sendMessage("Nh√≥m n√†y ch∆∞a b·ªã ch·∫∑n!", threadID);
        Thread.unban(threadID).then(success => {
          if (!success)
            return api.sendMessage("Kh√¥ng th·ªÉ b·ªè ch·∫∑n nh√≥m n√†y!", threadID);
          api.sendMessage("Nh√≥m n√†y ƒë√£ ƒë∆∞·ª£c b·ªè ch·∫∑n!", threadID);
          //Clear from blocked
          __GLOBAL.threadBlocked.splice(indexOfThread, 1);
          modules.log(threadID, "Unban Thread");
        });

        return;
      }
      return;
    }

    Rank.updatePoint(senderID, 2);

    // Unban user
    if (
      contentMessage.indexOf(`${prefix}unban`) == 0 &&
      admins.includes(senderID)
    ) {
      const mentions = Object.keys(event.mentions);
      if (mentions.length == 0)
        return api.sendMessage("Vui l√≤ng tag nh·ªØng ng∆∞·ªùi c·∫ßn unban", threadID);
      mentions.forEach(mention => {
        const indexOfUser = __GLOBAL.userBlocked.indexOf(parseInt(mention));
        if (indexOfUser == -1)
          return api.sendMessage(
            {
              body: `${event.mentions[mention]} ch∆∞a b·ªã ban, vui l√≤ng ban tr∆∞·ªõc!`,
              mentions: [
                {
                  tag: event.mentions[mention],
                  id: mention
                }
              ]
            },
            threadID
          );

        User.unban(mention).then(success => {
          if (!success)
            return api.sendMessage("Kh√¥ng th·ªÉ unban ng∆∞·ªùi n√†y!", threadID);
          api.sendMessage(
            {
              body: `ƒê√£ unban ${event.mentions[mention]}!`,
              mentions: [
                {
                  tag: event.mentions[mention],
                  id: mention
                }
              ]
            },
            threadID
          );
          //Clear from blocked
          __GLOBAL.userBlocked.splice(indexOfUser, 1);
          modules.log(mentions, "Unban User");
        });
      });
      return;
    }

    // Ban thread
    if (contentMessage == `${prefix}ban thread` && admins.includes(senderID)) {
      api.sendMessage("B·∫°n c√≥ ch·∫Øc mu·ªën ban group n√†y ?", threadID, function(
        error,
        info
      ) {
        if (error) return modules.log(error, 2);
        __GLOBAL.confirm.push({
          type: "ban:thread",
          messageID: info.messageID,
          target: parseInt(threadID),
          author: senderID
        });
      });
      return;
    }

    // Ban user
    if (
      contentMessage.indexOf(`${prefix}ban`) == 0 &&
      admins.includes(senderID)
    ) {
      const mentions = Object.keys(event.mentions);
      if (mentions.length == 0)
        return api.sendMessage("Vui l√≤ng tag nh·ªØng ng∆∞·ªùi c·∫ßn ban!", threadID);
      mentions.forEach(mention => {
        if (admins.includes(mention))
          return api.sendMessage(
            "B·∫°n kh√¥ng ƒë·ªß th·∫©m quy·ªÅn ƒë·ªÉ ban ng∆∞·ªùi n√†y?",
            threadID
          );
        api.sendMessage(
          {
            body: `B·∫°n c√≥ ch·∫Øc mu·ªën ban ${event.mentions[mention]}?`,
            mentions: [
              {
                tag: event.mentions[mention],
                id: mention
              }
            ]
          },
          threadID,
          function(error, info) {
            if (error) return modules.log(error, 2);
            __GLOBAL.confirm.push({
              type: "ban:user",
              messageID: info.messageID,
              target: {
                tag: event.mentions[mention],
                id: parseInt(mention)
              },
              author: senderID
            });
          }
        );
      });
      return;
    }
    
    /* ==================== SYSTEM ================ */
    
    //g·ª≠i report t·ªõi admin
    if (contentMessage.indexOf(`${prefix}report`) == 0) {
      var content = contentMessage.slice(
        prefix.length + 7,
        contentMessage.length
      );
      if (content.length == 0)
        return api.sendMessage(
          " C√≥ v·∫ª nh∆∞ b·∫°n ch∆∞a nh·∫≠p th√¥ng tin, vui l√≤ng nh·∫≠p th√¥ng tin l·ªói m√† b·∫°n g·∫∑p!",
          threadID
        );
      api.sendMessage(
        " C√≥ b√°o c√°o l·ªói m·ªõi t·ª´ id: " +
          senderID +
          "\n - ThreadID g·∫∑p l·ªói: " +
          threadID +
          "\n - L·ªói g·∫∑p ph·∫£i: " +
          content +
          " \n - l·ªói ƒë∆∞·ª£c th√¥ng b√°o v√†o l√∫c: " +
          nd,
        admins
      );
      api.sendMessage("Th√¥ng tin l·ªói c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ admin!", threadID);
      return;
    }
    
    //l·∫•y t√™n group
    if (
      contentMessage.indexOf(`${prefix}getname`) == 0 &&
      admins.includes(senderID)
    ) {
      var content = contentMessage.slice(
        prefix.length + 8,
        contentMessage.length
      );
      if (content.length == 0)
        return api.sendMessage("B·∫°n ch∆∞a nh·∫≠p ID thread!", threadID);
      api.getThreadInfo(content, function(err, info) {
        if (err) throw err;
        api.sendMessage(info.name, threadID);
      });
    }
    
    

    /* ==================== CRON JOB =============== */

    //nh·∫Øc ƒëi ng·ªß trong th·ªùi gian t·ª´ 11h00PM ƒë·∫øn 6h00AM
    if (h >= 23 && h <= 6 && !checkthreadid.hasOwnProperty(threadID)) {
      api.sendMessage(
        `Tr·ªÖ r·ªìi ƒë·∫•y nii-chan, mau t·∫Øt thi·∫øt b·ªã r·ªìi ƒëi ng·ªß ƒëi. „Åä„ÇÑ„Åô„Åø„Å™„Åï„ÅÑÔºÅ `,
        threadID,
        function() {
          console.log("nh·∫Øc ƒëi ng·ªß thread: " + threadID);
          checkthreadid[threadID] = true;
        }
      );
      return;
    }

    //nh·∫Øc ƒëi ng·ªß trong th·ªùi gian 10h00PM t·ªõi 11h00PM
    if (h >= 22 && h <= 23 && !sleeptime.hasOwnProperty(threadID)) {
      api.sendMessage(
        `T·ªõi gi·ªù ng·ªß r·ªìi ƒë·∫•y nii-chan, „Åä„ÇÑ„Åô„Åø„Å™„Åï„ÅÑ!  `,
        threadID,
        function() {
          console.log("nh·∫Øc ƒëi ng·ªß thread: " + threadID);
          sleeptime[threadID] = true;
        }
      );
      return;
    }

    if (h >= 6 && h <= 9 && !wakelist.hasOwnProperty(threadID)) {
      api.sendMessage(
        ` „Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ c√°c nii-chan uwu `,
        threadID,
        function() {
          console.log("thread ƒë√£ th·ª©c: " + threadID);
          wakelist[threadID] = true;
        }
      );
      return;
    }

    /* ==================== SMTHING ================ */
    
    //ping
    if (contentMessage == `${prefix}ping`) {
			api.getThreadInfo(threadID, function(err, info) {
				if (err) throw err;
				ids = info.participantIDs;
				botid = api.getCurrentUserID();
				callid = {
					body: "Pingüèì",
					mentions: [{
						tag: `${botid}`,
						id: botid
					}]
				}
				ids.forEach(getid => {
					addthis = {
						tag: `${getid}`,
						id: getid
					}
					callid["mentions"].push(addthis);
				});
				api.sendMessage(callid, threadID);
			});
			return;
		}

    //detect
    if (contentMessage == `${prefix}swearing on`) {
      delete checkCrapList[threadID];
      onoff = true;
      api.sendMessage("ƒê√£ b·∫≠t nh·∫Øc nh·ªü n√≥i t·ª•c!", threadID);
      console.log(checkCrapList);
      return console.log("on swearing");
    } else if (contentMessage == `${prefix}swearing off`) {
      checkCrapList[threadID] = false;
      onoff = false;
      api.sendMessage("ƒê√£ t·∫Øt nh·∫Øc nh·ªü n√≥i t·ª•c!", threadID);
    }

    if (modules.checkCrap(contentMessage)) {
      if (!checkCrapList.hasOwnProperty(threadID)) {
        if (admins.includes(senderID)) {
          api.sendMessage(`Master h·∫°n ch·∫ø n√≥i b·∫≠y ƒëi ·∫° :(`, threadID);
          checkCrapList[threadID] = false;
          return;
        } else {
          api.sendMessage(
            ` h·∫°n ch·∫ø n√≥i b·∫≠y ƒëi ·∫°, b·ªçn m√¨nh l√† ng∆∞·ªùi vƒÉn ho√° :(`,
            threadID
          );
          checkCrapList[threadID] = false;
          return;
        }
      }
    }
    
    /* 
    //count n√≥i b·∫≠y
    if (modules.checkCrap(contentMessage)) {
      if (!fs.existsSync("userCount.json")) {
        firstJSON = {
          users: []
        };
        fs.writeFile(
          "userCount.json",
          JSON.stringify(firstJSON),
          "utf-8",
          err => {
            if (err) throw err;
          }
        );
      }
      fs.readFile("userCount.json", "utf-8", function(err, data) {
        if (err) throw err;
        oldData = JSON.parse(data);
        if (!oldData.users.some(item => item.id == senderID)) {
          oldData.users.push({
            id: `${senderID}`,
            count: 1
          });
        } else {
          for (var i = 0; i < oldData.users.length; i++) {
            if (oldData.users[i].id == senderID) {
              oldData.users[i].count += 1;
              break;
            }
          }
        }
        const newData = JSON.stringify(oldData);
        fs.writeFile("userCount.json", newData, "utf-8", err => {
          if (err) throw err;
          api.sendMessage(newData, threadID);
        });
      });
      return;
    }
    
    */

    //g·ªçi bot
    if (
      contentMessage == `${prefix}sumi`
    )
      return api.sendMessage(`D·∫° g·ªçi Sumi ·∫°?`, threadID);

    //lenny
    if (contentMessage == `${prefix}lenny`)
      return api.sendMessage("( Õ°¬∞ Õú ñ Õ°¬∞) ", threadID);

    //hug
    if (contentMessage == `${prefix}hug`)
      return api.sendMessage(" („Å§ Õ°¬∞ Õú ñ Õ°¬∞)„Å§  ", threadID);

    //mlem
    if (contentMessage == `${prefix}mlem`)
      return api.sendMessage(" ( Õ°¬∞üëÖ Õ°¬∞)  ", threadID);
    //care
    if (contentMessage == `${prefix}care`)
      return api.sendMessage("¬Ø\\_(„ÉÑ)_/¬Ø", threadID);

    //prefix
    if (contentMessage == `prefix`)
      return api.sendMessage("Prefix is: !", threadID);

    //wiki search
    if (contentMessage.indexOf(`${prefix}wiki`) == 0) {
      var content = contentMessage
        .slice(prefix.length + 5, contentMessage.length)
        .trim();
     if (content.length == 0)
        return api.sendMessage(
          `B·∫°n ch∆∞a nh·∫≠p th√¥ng tin ƒë·ªÉ t√¨m ki·∫øm!`,
          threadID
        );
      const wtf = require("wtf_wikipedia");

      wtf.fetch(content).then(doc => {
        api.sendMessage("\n n·ªôi dung: " + doc.sentences(0).text(), threadID);
      });
      return;
    }
    
    //simsimi
    if (contentMessage.indexOf(`${prefix}sim`) == 0) {
      const request = require("request");
      var content = contentMessage
        .slice(prefix.length + 4, contentMessage.length)
        .trim();
      if (content.length == 0)
        return api.sendMessage(`B·∫°n ch∆∞a nh·∫≠p th√¥ng tin k√¨a :(`, threadID);
      let url = `http://ghuntur.com/simsim.php?lc=vn&deviceId=&bad=0&txt=${content}`;
      let trueurl = encodeURI(url);
      var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
      var xmlHttp = new XMLHttpRequest();
      xmlHttp.open("GET", trueurl, true);
      xmlHttp.onload = () => {
        api.sendMessage(xmlHttp.responseText, threadID);
      };
      xmlHttp.send();
      return;
    }

    //t√¨m v·ªã tr√≠ theo ip
    if (contentMessage.indexOf(`${prefix}local`) == 0) {
      const apilocal = require("./modules/findlocaltion");
      let callback = function() {
        delete require.cache[
          require.resolve(__dirname + "/src/findlocaltion.json")
        ];
        let iplocal = require(__dirname + "/src/findlocaltion.json");
        console.log(iplocal);
        if (iplocal.status == "success") {
          api.sendMessage(
            " To√†n b·ªô th√¥ng tin v·ªÅ ip: " +
              iplocal.query +
              "\n - Th√†nh ph·ªë: " +
              iplocal.city +
              "\n - T√™n mi·ªÅn: " +
              iplocal.regionName +
              "\n - Qu·ªëc gia: " +
              iplocal.country +
              "\n - N√∫i gi·ªù: " +
              iplocal.timezone +
              "\n - AS mumber v√† t·ªï ch·ª©c: " +
              iplocal.as +
              "\n - T√™n t·ªï ch·ª©c: " +
              iplocal.org +
              "\n - T√™n ISP: " +
              iplocal.isp +
              ".",
            threadID
          );
        } else {
          api.sendMessage(
            "ip b·∫°n nh·∫≠p kh√¥ng t·ªïn t·∫°i ho·∫∑c h·ªá th·ªëng l·ªói, vui l√≤ng th·ª≠ l·∫°i sau! L·ªói: " +
              iplocal.status +
              " | " +
              iplocal.message +
              ".",
            threadID
          );
        }
      };
      apilocal.api(
        contentMessage.slice(prefix.length + 6, contentMessage.length),
        callback
      );
      return;
    }

    //th·ªùi ti·∫øt
    if (contentMessage.indexOf(`${prefix}weather`) == 0) {
      const weather = require("./modules/weather");
      let callback = function() {
        delete require.cache[require.resolve(__dirname + "/src/weather.json")];
        let weatherdata = require(__dirname + "/src/weather.json");
        if (weatherdata.cod == "200") {
          api.sendMessage(
            `Th√†nh ph·ªë: ` +
              weatherdata.name +
              `\n - nhi·ªát ƒë·ªô hi·ªán t·∫°i: ` +
              weatherdata.main.temp +
              `¬∞C \n - B·∫ßu tr·ªùi: ` +
              weatherdata.weather[0].description +
              `\n - ƒë·ªô ·∫©m trong kh√¥ng kh√≠: ` +
              weatherdata.main.humidity +
              `% \n - t·ªëc ƒë·ªô gi√≥: ` +
              weatherdata.wind.speed +
              `km/h \n Tips: Th·ªùi ti·∫øt lu√¥n c·∫≠p nh·∫≠t theo realtime, n√™n c√°c b·∫°n ch√∫ √Ω th·ªùi ti·∫øt ƒë·ªÉ tr√°nh c√°c ho·∫°t ƒë·ªông vui ch∆°i b·ªã tr√¨ ho√£n nha <3`,
            threadID
          );
        } else {
          api.sendMessage(`Th√¥ng tin th√†nh ph·ªë c·ªßa b·∫°n kh√¥ng ƒë√∫ng!`, threadID);
          return;
        }
      };
      weather.api(
        contentMessage.slice(prefix.length + 8, contentMessage.length),
        callback
      );
      return;
    }

    //say
    if (contentMessage.indexOf(`${prefix}say`) == 0) {
      const tts = require("./modules/say");
      var content = contentMessage.slice(
        prefix.length + 4,
        contentMessage.length
      );

      let callback = function() {
        let m = {
          body: "",
          attachment: fs.createReadStream(__dirname + "/src/say.mp3")
        };
        api.sendMessage(m, threadID);
      };
      if (contentMessage.indexOf("jp") == 5)
        tts.other(
          contentMessage.slice(prefix.length + 7, contentMessage.length),
          "ja",
          callback
        );
      else if (contentMessage.indexOf("en") == 5)
        tts.other(
          contentMessage.slice(prefix.length + 7, contentMessage.length),
          "en-US",
          callback
        );
      else if (contentMessage.indexOf("ko") == 5)
        tts.other(
          contentMessage.slice(prefix.length + 7, contentMessage.lenght),
          "ko",
          callback
        );
      else if (contentMessage.indexOf("ru") == 5)
        tts.other(
          contentMessage.slice(prefix.lenght + 7, contentMessage.lenght),
          "ru",
          callback
        );
      else tts.vn(content, callback);
      return;
    }

    //c·∫≠p nh·∫≠t t√¨nh h√¨nh d·ªãch
    if (contentMessage == `${prefix}corona`) {
      const takedata = require("./modules/corona");
      let callback = function() {
        var data = require(__dirname + "/src/corona.json");
        api.sendMessage(
          "Th·∫ø gi·ªõi: \n - Nhi·ªÖm: " +
            data.data.global.cases +
            "\n - Ch·∫øt: " +
            data.data.global.deaths +
            "\n - H·ªìi ph·ª•c: " +
            data.data.global.recovered +
            "\n Vi·ªát Nam:\n - Nhi·ªÖm: " +
            data.data.vietnam.cases +
            "\n - Ch·∫øt: " +
            data.data.vietnam.deaths +
            "\n - Ph·ª•c h·ªìi: " +
            data.data.vietnam.recovered +
            "\nTips: N·∫øu b·∫°n c√≥ d·∫•u hi·ªáu nh∆∞: ho, s·ªët cao, s·ªï m≈©i, kh√≥ th·ªü, ƒëau v√≤m h·ªçng h√£y b√°o ngay cho b·ªô y t·∫ø v·ªõi ƒë∆∞·ªùng d√¢y n√≥ng: 19003228, 0989671115 v√† 0963851919 \n Tips: ƒë·ªÉ b·∫£o v·ªá s·ª©c kho·∫ª cho b·∫£n th√¢n v√† cho m·ªçi ng∆∞·ªùi xung quanh, tuy·ªát ƒë·ªëi tr√°nh ra kh·ªèi nh√† khi kh√¥ng c·∫ßn thi·∫øt, n·∫øu th·∫•y b·∫£n th√¢n hay ng∆∞·ªùi xung quanh c√≥ c√°c tri·ªáu ch·ª©ng c·ªßa b·ªánh vui l√≤ng b√°o ngay ƒë·∫øn c√°c c∆° s·ªü y t·∫ø g·∫ßn ƒë√≥ ho·∫∑c g·ªçi ƒëi·ªán cho ƒë∆∞·ªùng d√¢y n√≥ng c·ªßa b·ªô y t·∫ø ƒë√£ ƒë·ªÅ c·∫≠p b√™n tr√™n! #stayhome ",
          threadID
        );
      };
      takedata.take(callback);
      return;
    }

    //tu·ª≥ ch·ªçn
    if (contentMessage.indexOf(`${prefix}choose`) == 0) {
      var input = contentMessage
        .slice(prefix.length + 7, contentMessage.length)
        .trim();
      if (input.lenght == 0)
        return api.sendMessage(
          `B·∫°n kh√¥ng nh·∫≠p ƒë·ªß th√¥ng tin k√¨a :(`,
          threadID
        );
      var array = input.split(" | ");
      var rand = Math.floor(Math.random() * array.length);

      api.sendMessage(
        `hmmmm, em s·∫Ω ch·ªçn gi√∫p cho l√†: ` + array[rand] + `.`,
        threadID
      );
      return;
    }

    //detect ch·ª≠i bot
    if (
      contentMessage.indexOf("$ƒëcm") > -1 ||
      contentMessage.indexOf("$Bot") > -1 ||
      contentMessage.indexOf("$bot") > -1 ||
      contentMessage.indexOf("$ƒëi·∫øm") > -1 ||
      contentMessage.indexOf("sumi") > -1 ||
      contentMessage.indexOf("Sumi") > -1 ||
      contentMessage.indexOf("bot") > -1
    ) {
      if (
        contentMessage.indexOf("ngu") != -1 ||
        contentMessage.indexOf("c·∫∑c") != -1 ||
        contentMessage.indexOf("√≥c") != -1 ||
        contentMessage.indexOf("ch√≥") != -1 ||
        contentMessage.indexOf("ƒëm") != -1 ||
        contentMessage.indexOf("m·∫π") != -1 ||
        contentMessage.indexOf("ƒë·ªãt") != -1 ||
        contentMessage.indexOf("s·ªßa") != -1 ||
        contentMessage.indexOf("s√∫c v·∫≠t") != -1 ||
        contentMessage.indexOf("nh∆∞ l·ªìn") != -1 ||
        contentMessage.indexOf("ƒëƒ©") != -1 ||
        contentMessage.indexOf("cave") != -1 ||
        contentMessage.indexOf("l·ªìn") != -1 ||
        contentMessage.indexOf("ƒë·ªãt m·∫π") != -1
      ) {
        const gud = require("./modules/music");
        let callback = function() {
          let up = {
            body: "",
            attachment: fs.createReadStream(__dirname + "/src/music.mp3")
          };
          api.sendMessage(up, threadID);
        };
        var myArray = [
          "https://www.youtube.com/watch?v=fMW1pmDjdH0",
          "https://youtu.be/VYjTNW3zGhA",
          "https://youtube.com/watch?v=hoo02dFNEYA"
        ];
        var rand = Math.floor(Math.random() * myArray.length);

        gud.youtube(myArray[rand], callback);
        return;
      }
    }

    //waifu
    if (contentMessage === `${prefix}waifu`) {
      var route = Math.round(Math.random() * 10);
      if (route == 1) {
        api.sendMessage("D·∫° em s·∫Ω l√†m v·ª£ anh <3", threadID);
        api.sendMessage("Y√™u ch√†ng nhi·ªÅu <3", threadID);
        return;
      } else if (route == 2) {
        api.sendMessage("L√†m B·∫°n th√¥i nh√© :'(", threadID);
        return;
      } else if (route == 3) {
        api.sendMessage("D·∫° em s·∫Ω l√†m v·ª£ anh <3", threadID);
        api.sendMessage("Y√™u ch√†ng nhi·ªÅu <3", threadID);
        return;
      } else if (route > 4) {
        api.sendMessage("-.-", threadID);
        api.sendMessage("Ch√∫ng ta ch·ªâ l√† b·∫°n th√¥i :'(", threadID);
        return;
      }
    }

    //ramdom con s·ªë
    if (contentMessage == `${prefix}roll`) {
      var roll = Math.round(Math.random() * 100);
      api.sendMessage("UwU Your Number is " + roll + " ", threadID);
      return;
    }

    //t√°t ng∆∞·ªùi b·∫°n
    if (contentMessage.indexOf(`${prefix}t√°t`) == 0) {
      for (var i = 0; i < Object.keys(event.mentions).length; i++) {
        var x = contentMessage
          .slice(prefix.length + 5, contentMessage.length)
          .trim();
        api.sendMessage(
          {
            body: x + " V·ª´a B·ªã V·∫£ V·ª° M·ªìm \n",
            mentions: [
              {
                tag: x,
                id: Object.keys(event.mentions)[i]
              }
            ]
          },
          threadID
        );
      }
      return;
    }

    //Khi·∫øn bot nh√°i l·∫°i tin nh·∫Øn b·∫°n
    if (contentMessage.indexOf(`${prefix}echo`) == 0) {
      let echotext = contentMessage
        .slice(prefix.length + 4, contentMessage.length)
        .trim();
      api.sendMessage(`${echotext}`, threadID);
      return;
    }

    //nhentai ramdom code
    if (contentMessage == `${prefix}nhentai -r`) {
      let ramdomnhentai = Math.floor(Math.random() * 99999);
      api.sendMessage(
        `Code l√Ω t∆∞·ªüng c·ªßa nii-chan l√†: ${ramdomnhentai}`,
        threadID
      );
      return;
    }

    //to√†n b·ªô l·ªánh ·ªü ƒë√¢y
    if (contentMessage == `${prefix}help`) {
      event.isGroup &&
        api.sendMessage(
        fs.readFileSync(__dirname + "/src/help.txt","utf-8")
          ,
          senderID
        );

      api.sendMessage(`check inbox ƒëi nii-chan!`, threadID);
      return;
    }

    //l·∫•y th√¥ng tin osu!
    if (contentMessage.indexOf(`${prefix}osuinfo -u`) == 0) {
      var username = contentMessage
        .slice(prefix.length + 11, contentMessage.length)
        .trim();

      osuinfo(username);
      return;
    }

    //nhentai search
    if (contentMessage.indexOf(`${prefix}nhentai -i`) == 0) {
      let nhentai = require("./modules/nhentai-search");
      let linknhentai = contentMessage
        .slice(prefix.length + 11, contentMessage.length)
        .trim();
      api.sendMessage(`link: https://nhentai.net/g/${linknhentai}`, threadID);
      nhentai
        .get(
          contentMessage.slice(prefix.length + 11, contentMessage.length).trim()
        )
        .then(res => {
          if (!res.error) {
            let tags = "";
            res.tags.map(e => {
              tags = tags + e + ", ";
            });
            api.sendMessage("title: " + res.title, threadID);
            api.sendMessage(
              "pages: " + res.pages + "\nfavorites: " + res.favorites
            );
            api.sendMessage(
              "tags: \n" + tags.slice(0, tags.length - 2),
              threadID
            );
          } else api.sendMessage("l·ªói, id kh√¥ng x√°c ƒë·ªãnh üòû", threadID);
        });
      return;
    }

    //ph√°t video
    if (contentMessage.indexOf(`${prefix}play`) == 0) {
      var content = contentMessage.slice(
        prefix.length + 5,
        contentMessage.length
      );
      if (content.length == 0)
        return api.sendMessage(" B·∫°n ch∆∞a nh·∫≠p link youtube!", threadID);
      ytdl.getInfo(content, function(err, info) {
        if (err) throw err;
        if (info.length_seconds > 245)
          return api.sendMessage(
            "link Video d√†i qu√° 3 ph√∫t, xin vui l√≤ng g·ª≠i link video kh√°c!",
            threadID
          );
        const playvideo = require("./modules/playvideo");
        api.sendMessage(` ƒë·ª£i em m·ªôt x√≠u em ƒëang x·ª≠ l√Ω...`, threadID);
        let callback = function() {
          let up = {
            body: "",
            attachment: fs.createReadStream(__dirname + "/src/video.mp4")
          };
          api.sendMessage(up, threadID);
        };
        playvideo.youtube(
          contentMessage.slice(prefix.length + 4, contentMessage.length).trim(),
          callback
        );
      });

      return;
    }

    //ph√°t nh·∫°c
    if (contentMessage.indexOf(`${prefix}music`) == 0) {
      var content = contentMessage.slice(
        prefix.length + 6,
        contentMessage.length
      );
      if (content.length == 0)
        return api.sendMessage("B·∫°n ch∆∞a nh·∫≠p link!", threadID);

      ytdl.getInfo(content, function(err, info) {
        if (err) throw err;
        if (info.length_seconds > 360)
          return api.sendMessage(
            "ƒê·ªô d√†i video v∆∞·ª£t qu√° m·ª©c cho ph√©p, t·ªëi thi·ªÉu l√† 5 ph√∫t!",
            threadID
          );
        const music = require("./modules/music");
        api.sendMessage(" ƒë·ª£i em m·ªôt x√≠u em ƒëang x·ª≠ l√Ω...", threadID);
        let callback = function() {
          let up = {
            body: "",
            attachment: fs.createReadStream(__dirname + "/src/music.mp3")
          };
          api.sendMessage(up, threadID);
        };
        music.youtube(
          contentMessage.slice(prefix.length + 6, contentMessage.length).trim(),
          callback
        );
      });
      return;
    }

    //rank
    if (contentMessage == `${prefix}rank`)
      api.getUserInfo(senderID, (err, result) => {
        if (err) return modules.log(err, 2);
        const { name } = result[senderID];

        Rank.getPoint(senderID)
          .then(point => createCard({ id: senderID, name, ...point }))
          .then(path =>
            api.sendMessage(
              { body: "", attachment: fs.createReadStream(path) },
              threadID,
              () => {
                fs.unlinkSync(path);
              }
            )
          );
      });
  };
};
